# Install Portworx

# If you want to use clouddrives, set the environment variable cloud_drive="type%3Dgp2%2Csize%3D150"
# otherwise existing drives will be used

# To use a journal, set the environment variable journal=auto or journal=/dev/sdb

# Default secrets store is k8s; can also set environment variable secrets=vault

# If you do not want to deploy using the operator, set the environment variable operator=false, and then the DaemonSet will be used

# You can also set csi=true and security=true

# If you select cloud=vsphere, clouddrives will be provisioned from vsphere_disks

if [ "$operator" != false ]; then
  namespace=portworx
  kubectl create namespace portworx
else
  namespace=kube-system
fi
if [ $cloud = vsphere ]; then
  VSPHERE_USER=$(printf $vsphere_user | base64)
  VSPHERE_PASSWORD=$(printf $vsphere_password | base64)
  kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: px-vsphere-secret
  namespace: $namespace
type: Opaque
data:
  VSPHERE_USER: $VSPHERE_USER
  VSPHERE_PASSWORD: $VSPHERE_PASSWORD
EOF
  vsphere_suffix="vsp=true&ds=$vsphere_datastore&vc=$vsphere_host"
  for i in $vsphere_disks; do
    vsphere_suffix="$vsphere_suffix&s=%22type=thin,size=$i%22&kd=type%3Dthin%2Csize%3D64"
  done
fi

(dnf install -y epel-release ; dnf install -y jq) &
docker pull $(curl -sk https://install.portworx.com/$px_version?comp=stork | awk '/image: openstorage.stork/{print$2}') &
k8s_version=$(kubectl version --short | awk -Fv '/Server Version: / {print $3}')
url="https://install.portworx.com/$px_version?kbver=$k8s_version&b=true&c=px-deploy-$cluster&stork=true&st=k8s&lh=true&mon=true&promop=true"
[ -e /usr/bin/oc ] && url="$url&osft=true"
if [ "$cloud_drive" ]; then
  if [ "$cloud" = "aws" ]; then
    key=$(grep ^aws_access_key_id /root/.aws/credentials | cut -f 2 -d = | tr -d ' ' | head -1 | sed 's/+/%2B/g')
    secret=$(grep ^aws_secret_access_key /root/.aws/credentials | cut -f 2 -d = | tr -d ' ' | head -1 | sed 's/+/%2B/g')
    url="$url&e=AWS_ACCESS_KEY_ID%3D$key%2CAWS_SECRET_ACCESS_KEY%3D$secret"
  fi
  url="$url&s=%22$cloud_drive%22&kd=$cloud_drive"
fi
if [ "$journal" ]; then
  url="$url&j=$journal"
fi
[ "$px_suffix" ] && url="$url&$px_suffix"
[ "$vsphere_suffix" ] && url="$url&$vsphere_suffix"
[ "$platform" = eks ] && url="$url&eks=true"
[ "$platform" = ocp4 ] && url="$url&r=17001"
[ "$operator" = false ] || url="$url&operator=true"
[ "$security" = true ] && url="$url&security=true"
[ -n "$csi" ] && url="$url&csi=$csi"
[ "$etcd" = EXTERNAL ] && url="$url&k=etcd:http://$(ssh master-1 curl https://ipinfo.io/ip):2382"

if [ "$platform" = ocp4 ]; then
  oc apply -f - <<EOF
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: kube-system-og
  namespace: kube-system
spec:
  targetNamespaces:
  - kube-system
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: portworx-certified
  namespace: kube-system
spec:
  channel: stable
  installPlanApproval: Automatic
  name: portworx-certified
  source: certified-operators
  sourceNamespace: openshift-marketplace
  startingCSV: portworx-operator.v1.6.1
EOF
  while ! oc get csv -n kube-system  | grep portworx-operator | grep -q Succeeded ; do
    sleep 2
  done
fi

if [ "$operator" != false -a "$platform" != ocp4 ]; then
  [ -e /sbin/azure-repo-svc ] && kubectl taint node --all node-role.kubernetes.io/master-
  kubectl apply -f "https://install.portworx.com/$px_version?comp=pxoperator"
  while ! kubectl wait --for=condition=ready pod -lname=portworx-operator -n kube-system; do
    sleep 2
  done
  [ -e /sbin/azure-repo-svc ] && kubectl taint node --all node-role.kubernetes.io/master=:NoSchedule-
fi

if [ "$secrets" = vault ]; then
  bash /assets/install-vault.sh
  url="$url&st=vault&e=VAULT_ADDR%3Dhttp://master-$cluster:8200"
fi

if [ "$platform" = gke ]; then
  url="$url&gke=true"
fi

if [ "$cloud" = azure ] ; then
  kubectl create secret generic -n kube-system px-azure --from-literal=AZURE_TENANT_ID=$azure__tenant --from-literal=AZURE_CLIENT_ID=$azure__client --from-literal=AZURE_CLIENT_SECRET=$azure__secret
  kubectl create secret generic -n portworx px-azure --from-literal=AZURE_TENANT_ID=$azure__tenant --from-literal=AZURE_CLIENT_ID=$azure__client --from-literal=AZURE_CLIENT_SECRET=$azure__secret
fi

if [ "$platform" = aks ]; then
  url="$url&aks=true"
fi

curl -sko /tmp/px.yml $url
if [ "$operator" != false -a "$platform" != ocp4 ]; then
  sed -i 's/namespace: kube-system/namespace: portworx/' /tmp/px.yml
fi
kubectl apply -f /tmp/px.yml

wait
if [ "$storageless" = true ]; then
  INDEX=$(kubectl get ds portworx -n kube-system -o json | jq '.spec.template.spec.containers[0].args | bsearch("-a")')
  kubectl patch ds portworx -n kube-system --type='json' -p '[{"op":"remove","path":"/spec/template/spec/containers/0/args/'$INDEX'"}]'
fi

curl -sL https://github.com/portworx/pxc/releases/download/v0.33.0/pxc-v0.33.0.linux.amd64.tar.gz | tar xvz -C /tmp
curl -so /usr/local/bin/pxc-pxctl https://raw.githubusercontent.com/portworx/pxc/master/component/pxctl/pxc-pxctl
mv /tmp/pxc/kubectl-pxc /usr/bin
chmod +x /usr/local/bin/pxc-pxctl
[ "$operator" != false ] && kubectl-pxc config cluster set --portworx-service-namespace=portworx

# Install storkctl
stork_image=$(curl -sk https://install.portworx.com/$px_version?comp=stork | awk '/image: openstorage.stork/{print$2}')
id=$(docker create $stork_image)
docker cp $id:/storkctl/linux/storkctl /usr/bin

# Install Grafana
if [ "$operator" != false ]; then
  kubectl -n portworx create configmap grafana-dashboard-config --from-file=grafana-dashboard-config.yaml=<(curl -s https://docs.portworx.com/samples/k8s/pxc/grafana-dashboard-config.yaml)
  kubectl -n portworx create configmap grafana-source-config --from-file=grafana-datasource.yaml=<(curl -s https://docs.portworx.com/samples/k8s/pxc/grafana-datasource.yaml)
  kubectl -n portworx create configmap grafana-dashboards --from-file=portworx-cluster-dashboard.json=<(curl -s https://docs.portworx.com/samples/k8s/pxc/portworx-cluster-dashboard.json) --from-file=portworx-node-dashboard.json=<(curl -s https://docs.portworx.com/samples/k8s/pxc/portworx-node-dashboard.json) --from-file=portworx-volume-dashboard.json=<(curl -s https://docs.portworx.com/samples/k8s/pxc/portworx-volume-dashboard.json) --from-file=portworx-etcd-dashboard.json=<(curl -s https://docs.portworx.com/samples/k8s/pxc/portworx-etcd-dashboard.json)
  kubectl apply -f <(curl -s https://docs.portworx.com/samples/k8s/pxc/grafana.yaml | sed s/kube-system/portworx/)
  if [ $platform != eks ]; then
    kubectl patch svc grafana -n portworx -p '{"spec": { "type": "NodePort", "ports": [ { "nodePort": 30112, "port": 3000, "protocol": "TCP", "targetPort": 3000 } ] } }'
    while ! curl -m 1 -s -X POST -H "Content-Type: application/json" -d '{"Name":"portworx","type":"prometheus","access":"server","url":"http://px-prometheus:9090"}' http://admin:admin@localhost:30112/api/datasources; do
      echo waiting for grafana
      sleep 2
    done
    curl -s -X PUT -H "Content-Type: application/json" -d '{"oldPassword":"admin","newPassword":"admin","confirmNew":"admin"}' http://admin:admin@localhost:30112/api/user/password
  fi
fi
